# PostgreSQL. Versions 9.3 and up are supported.
#
# Install the pg driver:
#   gem install pg
# On macOS with Homebrew:
#   gem install pg -- --with-pg-config=/usr/local/bin/pg_config
# On macOS with MacPorts:
#   gem install pg -- --with-pg-config=/opt/local/lib/postgresql84/bin/pg_config
# On Windows:
#   gem install pg
#       Choose the win32 build.
#       Install PostgreSQL and put its /bin directory on your path.
#
# Configure Using Gemfile
# gem "pg"
#
default: &default
  adapter: postgresql
  encoding: unicode
  host: localhost
  username: user
  password: user
  # For details on connection pooling, see Rails configuration guide
  # https://guides.rubyonrails.org/configuring.html#database-pooling
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  username: postgres
  password: Nalian@2020
  host: localhost

development:
  <<: *default
  database: blog_app_dev
  template: template0

  database: blog_app_development
  username: user
  password: user
  # The specified database role being used to connect to postgres.
  # To create additional roles in postgres see `$ createuser --help`.
  # When left blank, postgres will use the default role. This is
@@ -61,9 +61,9 @@ development:
# Do not set this db to the same as development or production.
test:
  <<: *default
  database: blogApp_test
  template: template0

  database: blog_app_test
  username: user
  password: user
# As with config/credentials.yml, you never want to store sensitive information,
# like your database password, in your source code. If your source code is
# ever seen by anyone, they now have access to your database.
@@ -86,6 +86,6 @@ test:
#
production:
  <<: *default
  database: blog_app_prod
  username: postgres
  password: Nalian@2020
  database: blog_app_production
  username: blog_app
  password: <%= ENV["BLOG_APP_DATABASE_PASSWORD"] %>